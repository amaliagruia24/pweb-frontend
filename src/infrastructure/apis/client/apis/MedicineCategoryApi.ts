/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MedicineCategoryAddDTO,
  MedicineCategoryDTO,
  MedicineCategoryDTORequestResponse,
  RequestResponse,
} from '../models';
import {
    MedicineCategoryAddDTOFromJSON,
    MedicineCategoryAddDTOToJSON,
    MedicineCategoryDTOFromJSON,
    MedicineCategoryDTOToJSON,
    MedicineCategoryDTORequestResponseFromJSON,
    MedicineCategoryDTORequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiMedicineCategoryAddPostRequest {
    medicineCategoryAddDTO?: MedicineCategoryAddDTO;
}

export interface ApiMedicineCategoryDeleteIdDeleteRequest {
    id: string;
}

export interface ApiMedicineCategoryGetByIdIdGetRequest {
    id: string;
}

export interface ApiMedicineCategoryUpdatePutRequest {
    medicineCategoryDTO?: MedicineCategoryDTO;
}

/**
 * 
 */
export class MedicineCategoryApi extends runtime.BaseAPI {

    /**
     */
    async apiMedicineCategoryAddPostRaw(requestParameters: ApiMedicineCategoryAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/MedicineCategory/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MedicineCategoryAddDTOToJSON(requestParameters.medicineCategoryAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMedicineCategoryAddPost(requestParameters: ApiMedicineCategoryAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiMedicineCategoryAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMedicineCategoryDeleteIdDeleteRaw(requestParameters: ApiMedicineCategoryDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiMedicineCategoryDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/MedicineCategory/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMedicineCategoryDeleteIdDelete(requestParameters: ApiMedicineCategoryDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiMedicineCategoryDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMedicineCategoryGetByIdIdGetRaw(requestParameters: ApiMedicineCategoryGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MedicineCategoryDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiMedicineCategoryGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/MedicineCategory/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MedicineCategoryDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMedicineCategoryGetByIdIdGet(requestParameters: ApiMedicineCategoryGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MedicineCategoryDTORequestResponse> {
        const response = await this.apiMedicineCategoryGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMedicineCategoryUpdatePutRaw(requestParameters: ApiMedicineCategoryUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/MedicineCategory/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MedicineCategoryDTOToJSON(requestParameters.medicineCategoryDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMedicineCategoryUpdatePut(requestParameters: ApiMedicineCategoryUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiMedicineCategoryUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
