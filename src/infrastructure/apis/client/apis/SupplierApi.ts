/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  RequestResponse,
  SupplierAddDTO,
  SupplierDTO,
  SupplierDTORequestResponse,
} from '../models';
import {
    RequestResponseFromJSON,
    RequestResponseToJSON,
    SupplierAddDTOFromJSON,
    SupplierAddDTOToJSON,
    SupplierDTOFromJSON,
    SupplierDTOToJSON,
    SupplierDTORequestResponseFromJSON,
    SupplierDTORequestResponseToJSON,
} from '../models';

export interface ApiSupplierAddPostRequest {
    supplierAddDTO?: SupplierAddDTO;
}

export interface ApiSupplierDeleteIdDeleteRequest {
    id: string;
}

export interface ApiSupplierGetByIdIdGetRequest {
    id: string;
}

export interface ApiSupplierUpdatePutRequest {
    supplierDTO?: SupplierDTO;
}

/**
 * 
 */
export class SupplierApi extends runtime.BaseAPI {

    /**
     */
    async apiSupplierAddPostRaw(requestParameters: ApiSupplierAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Supplier/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SupplierAddDTOToJSON(requestParameters.supplierAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSupplierAddPost(requestParameters: ApiSupplierAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiSupplierAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSupplierDeleteIdDeleteRaw(requestParameters: ApiSupplierDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiSupplierDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Supplier/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSupplierDeleteIdDelete(requestParameters: ApiSupplierDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiSupplierDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSupplierGetByIdIdGetRaw(requestParameters: ApiSupplierGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SupplierDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiSupplierGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Supplier/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SupplierDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSupplierGetByIdIdGet(requestParameters: ApiSupplierGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SupplierDTORequestResponse> {
        const response = await this.apiSupplierGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiSupplierUpdatePutRaw(requestParameters: ApiSupplierUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Supplier/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SupplierDTOToJSON(requestParameters.supplierDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiSupplierUpdatePut(requestParameters: ApiSupplierUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiSupplierUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
