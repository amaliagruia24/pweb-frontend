/* tslint:disable */
/* eslint-disable */
/**
 * MobyLab Web App
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MedicineAddDTO,
  MedicineDTO,
  MedicineDTOPagedResponseRequestResponse,
  MedicineDTORequestResponse,
  RequestResponse,
} from '../models';
import {
    MedicineAddDTOFromJSON,
    MedicineAddDTOToJSON,
    MedicineDTOFromJSON,
    MedicineDTOToJSON,
    MedicineDTOPagedResponseRequestResponseFromJSON,
    MedicineDTOPagedResponseRequestResponseToJSON,
    MedicineDTORequestResponseFromJSON,
    MedicineDTORequestResponseToJSON,
    RequestResponseFromJSON,
    RequestResponseToJSON,
} from '../models';

export interface ApiMedicineAddPostRequest {
    medicineAddDTO?: MedicineAddDTO;
}

export interface ApiMedicineDeleteIdDeleteRequest {
    id: string;
}

export interface ApiMedicineGetByIdIdGetRequest {
    id: string;
}

export interface ApiMedicineGetPageGetRequest {
    search?: string;
    page?: number;
    pageSize?: number;
}

export interface ApiMedicineUpdatePutRequest {
    medicineDTO?: MedicineDTO;
}

/**
 * 
 */
export class MedicineApi extends runtime.BaseAPI {

    /**
     */
    async apiMedicineAddPostRaw(requestParameters: ApiMedicineAddPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Medicine/Add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MedicineAddDTOToJSON(requestParameters.medicineAddDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMedicineAddPost(requestParameters: ApiMedicineAddPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiMedicineAddPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMedicineDeleteIdDeleteRaw(requestParameters: ApiMedicineDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiMedicineDeleteIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Medicine/Delete/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMedicineDeleteIdDelete(requestParameters: ApiMedicineDeleteIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiMedicineDeleteIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMedicineGetByIdIdGetRaw(requestParameters: ApiMedicineGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MedicineDTORequestResponse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling apiMedicineGetByIdIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Medicine/GetById/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MedicineDTORequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMedicineGetByIdIdGet(requestParameters: ApiMedicineGetByIdIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MedicineDTORequestResponse> {
        const response = await this.apiMedicineGetByIdIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMedicineGetPageGetRaw(requestParameters: ApiMedicineGetPageGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MedicineDTOPagedResponseRequestResponse>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['Search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['Page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['PageSize'] = requestParameters.pageSize;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Medicine/GetPage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MedicineDTOPagedResponseRequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMedicineGetPageGet(requestParameters: ApiMedicineGetPageGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MedicineDTOPagedResponseRequestResponse> {
        const response = await this.apiMedicineGetPageGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async apiMedicineUpdatePutRaw(requestParameters: ApiMedicineUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RequestResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // Bearer authentication
        }

        const response = await this.request({
            path: `/api/Medicine/Update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: MedicineDTOToJSON(requestParameters.medicineDTO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RequestResponseFromJSON(jsonValue));
    }

    /**
     */
    async apiMedicineUpdatePut(requestParameters: ApiMedicineUpdatePutRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RequestResponse> {
        const response = await this.apiMedicineUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
